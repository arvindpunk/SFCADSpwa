{"version":3,"sources":["logo.png","serviceWorker.ts","components/login/index.tsx","screens/login/index.tsx","screens/request/index.tsx","screens/status/index.tsx","screens/addlocation/index.tsx","screens/information/index.tsx","screens/accept/index.tsx","screens/index.tsx","components/sidebar/index.tsx","components/navbar/index.tsx","container/index.tsx","scripts/initializeFirebase.tsx","index.tsx"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","LoginPanel","props","handleLogin","email","pass","firebase","signInWithEmailAndPassword","setState","toastOpen","toastMessage","message","Box","p","minHeight","alignContent","Collapse","in","this","Alert","severity","action","IconButton","aria-label","color","size","onClick","fontSize","TextField","fullWidth","id","label","margin","onChange","e","target","value","type","display","justifyContent","Button","variant","React","Component","LoginScreen","Fragment","Grid","container","justify","alignItems","item","xs","md","RequestScreen","db","componentDidMount","uid","currentUser","items","Array","collection","where","get","querySnapshot","forEach","doc","push","data","timestamp","toDate","handleSetDate","dialogOpen","set","requestedBy","acceptedBy","date","renderDialog","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","KeyboardButtonProps","DialogActions","autoFocus","getTimeStringFromDate","getHours","toString","padStart","getMinutes","getDateStringFromDate","toDateString","Date","utils","DateFnsUtils","List","disablePadding","map","index","cloneElement","Fade","ListItem","divider","button","key","ListItemText","primary","secondary","Zoom","appear","exit","timeout","Fab","style","position","bottom","right","StatusScreen","dummyData","completed","active","Stepper","orientation","Step","StepLabel","AddLocationScreen","padding","Typography","noValidate","placeholder","argument","InformationScreen","marginBottom","valueField","argumentField","AcceptScreen","handleCheckboxChange","event","checked","update","forceUpdate","ListItemSecondaryAction","Checkbox","disabled","ScreenManager","screenMap","Map","screen","Sidebar","handleLogout","signOut","code","setScreen","toggleDrawer","renderDrawerContents","width","Avatar","src","logo","paddingLeft","Divider","userType","loggedIn","ListItemIcon","renderSwipeableDrawer","SwipeableDrawer","onOpen","renderPermanentDrawer","Drawer","Navbar","AppBar","Toolbar","edge","title","AppContainer","setUserType","user","onAuthStateChanged","exists","setLoggedIn","bgcolor","Container","maxWidth","boxShadow","disableBackdropClick","disableEscapeKeyDown","DialogContentText","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeFirebase","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,yICYrCC,G,OAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,sICpBlDC,G,wDA5DX,WAAYC,GAAe,IAAD,8BACtB,cAAMA,IASVC,YAAc,WAAO,IAAD,KACZ,YAAKV,aAAL,eAAYW,SAAZ,UAAqB,EAAKX,aAA1B,aAAqB,EAAYY,OACjCC,SACSC,2BAA2B,EAAKd,MAAMW,MAAO,EAAKX,MAAMY,MACxDN,OAAM,SAACC,GACJ,EAAKQ,SAAS,CACVC,WAAW,EACXC,aAAcV,EAAMW,cAfxC,EAAKlB,MAAQ,CACTW,MAAO,GACPC,KAAM,GACNI,WAAW,EACXC,aAAc,IANI,E,qDAuBhB,IAAD,OACL,OACI,kBAACE,EAAA,EAAD,CAAKC,EAAG,EAAGC,UAAU,QAAQC,aAAa,UACtC,kBAACC,EAAA,EAAD,CAAUC,GAAIC,KAAKzB,MAAMgB,WACrB,kBAACU,EAAA,EAAD,CACAC,SAAS,QACTC,OACI,kBAACC,EAAA,EAAD,CACAC,aAAW,QACXC,MAAM,UACNC,KAAK,QACLC,QAAS,WACL,EAAKlB,SAAS,CAAEC,WAAW,MAG3B,kBAAC,IAAD,CAAWkB,SAAS,cAI3BT,KAAKzB,MAAMiB,eAGhB,kBAACkB,EAAA,EAAD,CAAWC,WAAS,EAACC,GAAG,QAAQC,MAAM,SAASC,OAAO,SAASC,SAAU,SAACC,GAAD,OAAO,EAAK1B,SAAS,CAACJ,MAAO8B,EAAEC,OAAOC,WAC/G,kBAACR,EAAA,EAAD,CAAWC,WAAS,EAACC,GAAG,OAAOO,KAAK,WAAWN,MAAM,WAAWC,OAAO,SAASC,SAAU,SAACC,GAAD,OAAO,EAAK1B,SAAS,CAACH,KAAM6B,EAAEC,OAAOC,WAC/H,kBAACxB,EAAA,EAAD,CAAK0B,QAAQ,OAAOC,eAAe,YAC/B,kBAACC,EAAA,EAAD,CACAC,QAAQ,YACRjB,MAAM,UACNE,QAAS,kBAAM,EAAKvB,gBAHpB,e,GAjDKuC,IAAMC,YCOhBC,E,uKAZP,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,UACxC,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAAC,EAAD,a,GAREV,IAAMC,W,4ICgJjBU,G,wDA5HX,WAAYnD,GAAe,IAAD,8BACtB,cAAMA,IAFVoD,QAC0B,IAU1BC,kBAAoB,WAAO,IAAD,EAChBC,EAAG,UAAGlD,SAAgBmD,mBAAnB,aAAG,EAA6BD,IACnCE,EAAQ,IAAIC,MACdH,GACAlD,cAAqBsD,WAAW,YAAYC,MAAM,cAAe,KAAML,GAClEM,MACA3E,MAAK,SAAC4E,GACHA,EAAcC,SAAQ,SAACC,GAAS,IAAD,EAC3BP,EAAMQ,KAAN,UAAWD,EAAIE,cAAf,aAAW,EAAYC,UAAUC,aAErC,EAAK7D,SAAS,CAAEkD,MAAOA,OAE1B3D,OAAM,SAACC,GACJL,QAAQC,IAAI,6BAA8BI,OAvBhC,EA4B1BsE,cAAgB,WAAO,IAAD,EAClB,EAAK9D,SAAS,CAAC+D,YAAY,IAC3BjE,cAAqBsD,WAAW,YAAYK,MAAMO,IAAI,CAClDC,YAAW,UAAEnE,SAAgBmD,mBAAlB,aAAE,EAA6BD,IAC1CkB,WAAY,GACZN,UAAW,EAAK3E,MAAMkF,OAEtB,EAAKlF,MAAMkF,MACX,EAAKlF,MAAMiE,MAAMQ,KAAK,EAAKzE,MAAMkF,OApCf,EAwC1BC,aAAe,WACX,OACI,kBAACC,EAAA,EAAD,CACIC,KAAM,EAAKrF,MAAM8E,WACjBQ,QAAS,kBAAM,EAAKvE,SAAS,CAAC+D,YAAY,KAC1CS,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAACC,EAAA,EAAD,CAAapD,GAAG,sBAAhB,mBAGA,kBAACqD,EAAA,EAAD,KACI,kBAAC,IAAD,CACAnD,OAAO,SACPF,GAAG,cACHC,MAAM,YACNK,MAAO,EAAK3C,MAAMkF,KAClB1C,SAAU,SAAC0C,GAAD,OAAU,EAAKnE,SAAS,CAACmE,KAAMA,KACzCS,oBAAqB,CACjB,aAAc,kBAItB,kBAACC,EAAA,EAAD,KACA,kBAAC7C,EAAA,EAAD,CACAd,QAAS,kBAAM,EAAK4C,iBACpB9C,MAAM,UAAU8D,WAAS,GAFzB,cAhEc,EA0E1BC,sBAAwB,SAACZ,GAIrB,OAH4BA,EAAKa,WAAW,IAAMb,EAAKa,WAAW,GAAG,EAAE,IAAIC,WAAWC,SAAS,EAAG,KAC5F,IAAMf,EAAKgB,aAAaF,WAAWC,SAAS,EAAG,KAC/C,KAAQf,EAAKa,WAAW,GAAI,KAAK,OA7EjB,EAiF1BI,sBAAwB,SAACjB,GAErB,OAD2BA,EAAKkB,gBAhFhC,EAAKpG,MAAQ,CACT8E,YAAY,EACZI,KAAM,IAAImB,KACVpC,MAAO,IAAIC,OAEf,EAAKL,GAAKhD,cAPY,E,qDAsFhB,IAAD,OACL,OACI,kBAAC,IAAD,CAAyByF,MAAOC,KAC5B,kBAACC,EAAA,EAAD,CAAMC,gBAAc,GACfhF,KAAKzB,MAAMiE,MAAMyC,KAAI,SAACxB,EAAMyB,GACzB,OAAO1D,IAAM2D,aACT,kBAACC,EAAA,EAAD,CAAMrF,IAAI,GACN,kBAACsF,EAAA,EAAD,CAAUC,SAAO,EAACC,QAAM,EAACC,IAAKN,GAC1B,kBAACO,EAAA,EAAD,CACAC,QAAS,EAAKrB,sBAAsBZ,GACpCkC,UAAW,EAAKjB,sBAAsBjB,YAKzDzD,KAAK0D,eACN,kBAACkC,EAAA,EAAD,CACAC,QAAQ,EACR9F,IAAI,EACJ+F,MAAM,EACNC,QAAS,KACL,kBAACC,EAAA,EAAD,CACAxF,QAAS,kBAAM,EAAKlB,SAAS,CAAC+D,YAAY,EAAMI,KAAM,IAAImB,QAC1DtE,MAAM,YACND,aAAW,MACX4F,MAAO,CACHC,SAAU,QACVC,OAAQ,GACRC,MAAO,KAEP,kBAAC,IAAD,a,GAtHI5E,IAAMC,Y,2BCmCnB4E,E,kDAvBX,WAAYrH,GAAe,IAAD,8BACtB,cAAMA,IA9BVsH,UAAY,CACR,CACIzF,MAAO,kBACP0F,WAAW,EACXC,QAAQ,GAEZ,CACI3F,MAAO,uBACP0F,WAAW,EACXC,QAAQ,GAEZ,CACI3F,MAAO,6BACP0F,WAAW,EACXC,QAAQ,GAEZ,CACI3F,MAAO,mBACP0F,WAAW,EACXC,QAAQ,GAEZ,CACI3F,MAAO,kBACP0F,WAAW,EACXC,QAAQ,IAOZ,EAAKjI,MAAQ,CACX2C,MAAO,GAHa,E,qDAQtB,OACI,kBAAC,IAAMS,SAAP,KACI,kBAAC8E,EAAA,EAAD,CAASC,YAAY,YAChB1G,KAAKsG,UAAUrB,KAAI,WAA+BC,GAAW,IAAvCrE,EAAsC,EAAtCA,MAAO0F,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,OACrC,OAAOhF,IAAM2D,aACT,kBAACwB,EAAA,EAAD,CAAMJ,UAAWA,EAAWC,OAAQA,EAAQhB,IAAKN,GAC7C,kBAAC0B,EAAA,EAAD,KAAY/F,c,GA5CjBW,IAAMC,W,QCkClBoF,E,uKAhCP,OACI,kBAACnH,EAAA,EAAD,CAAKoH,QAAS,GACV,kBAACC,EAAA,EAAD,CAAYxF,QAAQ,MAApB,qBAGA,kBAACwF,EAAA,EAAD,CAAYzG,MAAM,iBAAlB,2GAGA,0BAAM0G,YAAU,GACZ,kBAACtH,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CACAE,GAAG,OAAOC,MAAM,OAChBoG,YAAY,gBACZnG,OAAO,SACPH,WAAS,KAEb,kBAACjB,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CACAE,GAAG,OAAOC,MAAM,gBAChBoG,YAAY,kBACZnG,OAAO,SACPH,WAAS,KAEb,kBAACjB,EAAA,EAAD,CAAK0B,QAAQ,OAAOC,eAAe,WAAW1B,EAAG,GAC7C,kBAAC2B,EAAA,EAAD,CAAQC,QAAQ,YAAYjB,MAAM,WAAlC,iB,GA1BQkB,IAAMC,W,gBCOhCwB,EAAO,CACT,CAAEiE,SAAU,UAAWhG,MAAO,KAC9B,CAAEgG,SAAU,YAAahG,MAAO,IAChC,CAAEgG,SAAU,cAAehG,MAAO,KAwBvBiG,E,uKAnBP,OACI,kBAACzH,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACoH,EAAA,EAAD,CAAYxF,QAAQ,KAAK0E,MAAO,CAAEmB,aAAc,KAAhD,iBAGA,kBAAC,IAAD,CACAnE,KAAMA,GAEF,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAWoE,WAAW,QAAQC,cAAc,WAAWhH,MAAM,YAC7D,kBAAC,IAAD,Y,GAdYkB,IAAMC,W,mBCwGvB8F,G,kDA9FX,WAAYvI,GAAe,IAAD,8BACtB,cAAMA,IAFVoD,QAC0B,IAU1BC,kBAAoB,WAAO,IAAD,EAEtB,GADS,UAAGjD,SAAgBmD,mBAAnB,aAAG,EAA6BD,IAChC,CACL,IAAME,EAAQ,IAAIC,MAClBrD,cAAqBsD,WAAW,YAC3BE,MACA3E,MAAK,SAAC4E,GACHA,EAAcC,SAAQ,SAACC,GAAS,IAAD,MAC3BP,EAAMQ,KAAK,CACPpC,GAAImC,EAAInC,GACR6C,KAAI,UAAEV,EAAIE,cAAN,aAAE,EAAYC,UAAUC,SAC5BI,YAAW,UAAER,EAAIE,cAAN,aAAE,EAAYM,YACzBC,WAAU,UAAET,EAAIE,cAAN,aAAE,EAAYO,gBAGhC,EAAKlE,SAAS,CAAEkD,MAAOA,OAE1B3D,OAAM,SAACC,GACJL,QAAQC,IAAI,6BAA8BI,QA5BhC,EAiC1B0I,qBAAuB,SAACC,EAA4CvC,GAAmB,IAAD,EAClFzG,QAAQC,IAAI+I,EAAMxG,OAAOyG,SACzB,IACS,EADHpF,EAAG,UAAGlD,SAAgBmD,mBAAnB,aAAG,EAA6BD,IACrCA,IACAlD,cAAqBsD,WAAW,YAAYK,IAA5C,UAAgD,EAAKxE,MAAMiE,MAAM0C,UAAjE,aAAgD,EAAyBtE,IAAI+G,OAAO,CAChFnE,WAAYiE,EAAMxG,OAAOyG,QAAQpF,EAAI,KAEzC,EAAK/D,MAAMiE,MAAM0C,GAAO1B,WAAaiE,EAAMxG,OAAOyG,QAAQpF,EAAI,GAC9D,EAAKsF,gBAzCa,EAwD1BvD,sBAAwB,SAACZ,GAIrB,OAH4BA,EAAKa,WAAW,IAAMb,EAAKa,WAAW,GAAG,EAAE,IAAIC,WAAWC,SAAS,EAAG,KAC5F,IAAMf,EAAKgB,aAAaF,WAAWC,SAAS,EAAG,KAC/C,KAAQf,EAAKa,WAAW,GAAI,KAAK,OA3DjB,EA+D1BI,sBAAwB,SAACjB,GAErB,OAD2BA,EAAKkB,gBA9DhC,EAAKpG,MAAQ,CACT8E,YAAY,EACZI,KAAM,IAAImB,KACVpC,MAAO,IAAIC,OAEf,EAAKL,GAAKhD,cAPY,E,qDAoEhB,IAAD,OACL,OACI,kBAAC,IAAD,CAAyByF,MAAOC,KAC5B,kBAACC,EAAA,EAAD,CAAMC,gBAAc,GACfhF,KAAKzB,MAAMiE,MAAMyC,KAAI,WAAuBC,GAAW,IAAD,IAA9BzB,EAA8B,EAA9BA,KAAMD,EAAwB,EAAxBA,WAC3B,OAAOhC,IAAM2D,aACT,kBAACC,EAAA,EAAD,CAAMrF,IAAI,GACN,kBAACsF,EAAA,EAAD,CAAUC,SAAO,EAACC,QAAM,EAACC,IAAKN,GAC1B,kBAACO,EAAA,EAAD,CACAC,QAAS,EAAKrB,sBAAsBZ,GACpCkC,UAAW,EAAKjB,sBAAsBjB,KACtC,kBAACoE,EAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACAJ,QAASlE,IAAU,UAAIpE,SAAgBmD,mBAApB,aAAI,EAA6BD,KACpDyF,SAAwB,IAAdvE,GAAoBA,IAAU,UAAIpE,SAAgBmD,mBAApB,aAAI,EAA6BD,KACzEvB,SAAU,SAAC0G,GAAD,OAAW,EAAKD,qBAAqBC,EAAOvC,mB,GArFnE1D,IAAMC,WCElBuG,G,kDAlBX,WAAYhJ,GAAe,IAAD,8BACtB,cAAMA,IAHViJ,UAAY,IAAIC,IAIZ,EAAKD,UAAU3E,IAAI,UAAW,kBAAC,EAAD,OAC9B,EAAK2E,UAAU3E,IAAI,SAAU,kBAAC,EAAD,OAC7B,EAAK2E,UAAU3E,IAAI,eAAgB,kBAAC,EAAD,OACnC,EAAK2E,UAAU3E,IAAI,cAAe,kBAAC,EAAD,OAClC,EAAK2E,UAAU3E,IAAI,QAAS,kBAAC,EAAD,OAC5B,EAAK2E,UAAU3E,IAAI,SAAU,kBAAC,GAAD,OAPP,E,qDAUtB,OACI,kBAAC,IAAM3B,SAAP,KACK3B,KAAKiI,UAAUrF,IAAI5C,KAAKhB,MAAMmJ,a,GAfnB3G,IAAMC,W,+KCqLnB2G,G,4MAlKXC,aAAe,WACXjJ,SAAgBkJ,UAAUzJ,OAAM,SAACC,GAC7BL,QAAQC,IAAII,EAAMyJ,MAClB9J,QAAQC,IAAII,EAAMW,YAEtB,EAAKT,MAAMwJ,UAAU,SACrB,EAAKxJ,MAAMyJ,cAAa,I,EAG5BC,qBAAuB,WACnB,OACI,kBAAC,IAAM/G,SAAP,KACI,kBAACjC,EAAA,EAAD,CAAKuG,MAAO,CACR0C,MAAO,KAGX7B,QAAS,EACT1F,QAAQ,OACRW,WAAW,UACP,kBAAC6G,GAAA,EAAD,CAAQC,IAAKC,OACb,kBAAC/B,EAAA,EAAD,CAAYxF,QAAQ,KAAK0E,MAAO,CAAE8C,YAAa,KAA/C,YAIJ,kBAACC,GAAA,EAAD,MACA,kBAACjE,EAAA,EAAD,KAC4B,cAAvB,EAAK/F,MAAMiK,SACR,kBAAC5D,EAAA,EAAD,CAAUE,QAAM,EAACC,IAAK,EACtBuC,UAAW,EAAK/I,MAAMkK,SACtB1I,QAAS,WACL,EAAKxB,MAAMwJ,UAAU,WACrB,EAAKxJ,MAAMyJ,cAAa,KAExB,kBAACU,GAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAAC1D,EAAA,EAAD,iBAIN,KACsB,OAAvB,EAAKzG,MAAMiK,SACR,kBAAC5D,EAAA,EAAD,CAAUE,QAAM,EAACC,IAAK,EACtBuC,UAAW,EAAK/I,MAAMkK,SACtB1I,QAAS,WACL,EAAKxB,MAAMwJ,UAAU,UACrB,EAAKxJ,MAAMyJ,cAAa,KAExB,kBAACU,GAAA,EAAD,KAEI,kBAAC,IAAD,OAEJ,kBAAC1D,EAAA,EAAD,gBAIN,KACD,EAAKzG,MAAMkK,SACR,kBAAC7D,EAAA,EAAD,CAAUE,QAAM,EAACC,IAAK,EACtBhF,QAAS,WACL,EAAKxB,MAAMwJ,UAAU,UACrB,EAAKxJ,MAAMyJ,cAAa,KAExB,kBAACU,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAAC1D,EAAA,EAAD,gBAIN,KACF,kBAACJ,EAAA,EAAD,CAAUE,QAAM,EAACC,IAAK,EACtBhF,QAAS,WACL,EAAKxB,MAAMwJ,UAAU,gBACrB,EAAKxJ,MAAMyJ,cAAa,KAExB,kBAACU,GAAA,EAAD,KACA,kBAAC,KAAD,OAEA,kBAAC1D,EAAA,EAAD,sBAIJ,kBAACJ,EAAA,EAAD,CAAUE,QAAM,EAACC,IAAK,EACtBhF,QAAS,WACL,EAAKxB,MAAMwJ,UAAU,eACrB,EAAKxJ,MAAMyJ,cAAa,KAExB,kBAACU,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAAC1D,EAAA,EAAD,qBAIJ,kBAACuD,GAAA,EAAD,MACC,EAAKhK,MAAMkK,SACR,kBAAC7D,EAAA,EAAD,CAAUC,SAAO,EAACC,QAAM,EAACC,IAAI,IAC7BhF,QAAS,kBAAM,EAAK6H,iBAChB,kBAACc,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAAC1D,EAAA,EAAD,gBAKJ,kBAACJ,EAAA,EAAD,CAAUC,SAAO,EAACC,QAAM,EAACC,IAAI,IAC7BuC,SAA+B,SAArB,EAAK/I,MAAMmJ,OACrB3H,QAAS,WACL,EAAKxB,MAAMwJ,UAAU,SACrB,EAAKxJ,MAAMyJ,cAAa,KAExB,kBAACU,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAAC1D,EAAA,EAAD,kB,EASxB2D,sBAAwB,WACpB,OACI,kBAACC,GAAA,EAAD,CACIzF,KAAM,EAAK5E,MAAM4E,KACjB0F,OAAQ,kBAAM,EAAKtK,MAAMyJ,cAAa,IACtC5E,QAAS,kBAAM,EAAK7E,MAAMyJ,cAAa,KAEtC,EAAKC,yB,EAKlBa,sBAAwB,WACpB,OACI,kBAACC,GAAA,EAAD,CACIjI,QAAQ,aAEP,EAAKmH,yB,uDAMd,OACI,kBAAC,IAAM/G,SAAP,KAOK3B,KAAKoJ,6B,GA7JA5H,IAAMC,W,yCCMbgI,G,uKApBD,IAAD,OACL,OACI,kBAACC,GAAA,EAAD,CAAQxD,SAAS,UACb,kBAACyD,GAAA,EAAD,KACI,kBAACvJ,EAAA,EAAD,CACAwJ,KAAK,QACLtJ,MAAM,UACND,aAAW,OACXG,QAAS,kBAAM,EAAKxB,MAAMyJ,cAAa,KACnC,kBAAC,KAAD,OAEJ,kBAAC1B,EAAA,EAAD,CAAYxF,QAAQ,MACfvB,KAAKhB,MAAM6K,a,GAdfrI,IAAMC,W,UCqKZqI,G,kDAxJX,WAAY9K,GAAe,IAAD,8BACtB,cAAMA,IAWVqD,kBAAoB,WAChB,EAAKpD,eAbiB,EAgB1B8K,YAAc,SAAC5I,GACX,IAAM6I,EAAO5K,SAAgBmD,YACzByH,EACW5K,cACQsD,WAAW,SAASK,IAAIiH,EAAK1H,KACxCgB,IAAI,CACRnC,KAAMA,IACPlD,MAAK,WACJQ,QAAQC,IAAI,kCACC,QAATyC,EACA,EAAK7B,SAAS,CACV6I,OAAQ,SACRe,UAAU,IAEE,eAAT/H,EACP,EAAK7B,SAAS,CACV6I,OAAQ,UACRe,UAAU,IAGdzK,QAAQK,MAAM,sBAGrBD,OAAM,SAACC,GACJL,QAAQK,MAAM,2BAA4BA,MAG9CL,QAAQC,IAAI,uBAEhB,EAAKY,SAAS,CAAC+D,YAAY,KA7CL,EAgD1BpE,YAAc,WACVG,SAAgB6K,oBAAmB,SAACD,GAC5BA,EACW5K,cACQsD,WAAW,SAASK,IAAIiH,EAAK1H,KAExCM,MAAM3E,MAAK,SAAC8E,GACC,IAAD,IAAZA,EAAImH,OACqB,gBAArB,UAAAnH,EAAIE,cAAJ,eAAY9B,MACZ,EAAK7B,SAAS,CACV2J,SAAU,aACVd,OAAQ,UACRe,UAAU,IAEc,SAArB,UAAAnG,EAAIE,cAAJ,eAAY9B,MACnB,EAAK7B,SAAS,CACV2J,SAAU,MACVd,OAAQ,SACRe,UAAU,IAGdzK,QAAQC,IAAI,uBAGhB,EAAKY,SAAS,CAAC+D,YAAY,OAEhCxE,OAAM,SAACC,GACNL,QAAQC,IAAI,4BAA8BI,MAG9C,EAAKQ,SAAS,CACV6I,OAAQ,QACRe,UAAU,QAhFA,EAsF1BT,aAAe,SAAC7E,GACZ,EAAKtE,SAAS,CAACsE,KAAMA,KAvFC,EA0F1B4E,UAAY,SAACL,GACT,EAAK7I,SAAS,CAAC6I,OAAQA,KA3FD,EA8F1BgC,YAAc,SAACjB,GACX,EAAK5J,SAAS,CAAC4J,SAAUA,KA7FzB,EAAK3K,MAAQ,CACT2K,SAAyC,MAA/B9J,SAAgBmD,YAC1BqB,MAAM,EACNuE,OAAQ,QACRhH,KAAM,GACNkC,YAAY,EACZ4F,SAAU,IARQ,E,qDAkGhB,IAAD,OACL,OACI,kBAACvJ,EAAA,EAAD,CAAK0K,QAAQ,UAAUxK,UAAU,SAC7B,kBAAC,GAAD,CACIiK,MAAO7J,KAAKzB,MAAM4J,OAClBM,aAAczI,KAAKyI,eACvB,kBAAC,GAAD,CACIN,OAAQnI,KAAKzB,MAAM4J,OACnBvE,KAAM5D,KAAKzB,MAAMqF,KACjB6E,aAAczI,KAAKyI,aACnBD,UAAWxI,KAAKwI,UAChBU,SAAUlJ,KAAKzB,MAAM2K,SACrBD,SAAUjJ,KAAKzB,MAAM0K,WACzB,kBAACoB,EAAA,EAAD,CAAWC,SAAS,KAAKrE,MAAO,CAAEa,QAAS,IACvC,kBAACpH,EAAA,EAAD,CAAK0K,QAAQ,UAAUG,UAAW,GAC9B,kBAAC,GAAD,CACApC,OAAQnI,KAAKzB,MAAM4J,WAI3B,kBAACxE,EAAA,EAAD,CACAC,KAAM5D,KAAKzB,MAAM8E,WACjBQ,QAAS,kBAAM,EAAKvE,SAAS,CAAC+D,YAAY,KAC1CS,kBAAgB,qBAChBC,mBAAiB,2BACjByG,sBAAoB,EACpBC,sBAAoB,GAEhB,kBAACzG,EAAA,EAAD,CAAapD,GAAG,sBAAhB,8BAGA,kBAACqD,EAAA,EAAD,KACI,kBAACyG,GAAA,EAAD,0FAIJ,kBAACvG,EAAA,EAAD,KACI,kBAAC7C,EAAA,EAAD,CAAQX,WAAS,EACjBH,QAAS,kBAAM,EAAKuJ,YAAY,QAChCzJ,MAAM,aAFN,OAKA,kBAACgB,EAAA,EAAD,CAAQX,WAAS,EACjBH,QAAS,kBAAM,EAAKuJ,YAAY,eAChCzJ,MAAM,WAFN,qB,GA7IGkB,IAAMC,WC3B3BkJ,GAAiB,CACnBC,OAAQ,0CACRC,WAAY,0BACZC,YAAa,iCACbC,UAAW,UACXC,cAAe,sBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBAOJC,GAJY,WACvBhM,gBAAuBuL,KCP3BU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACGH,KACD,kBAAC,GAAD,OAEFI,SAASC,eAAe,SbcnB,SAAkB5N,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAI4N,IACpBC,GACApO,OAAOC,SAASoO,MAEJC,SAAWtO,OAAOC,SAASqO,OAIvC,OAGFtO,OAAOuO,iBAAiB,QAAQ,WAC9B,IAAMlO,EAAK,UAAM+N,GAAN,sBAEPtO,IAgEV,SAAiCO,EAAeC,GAE9CkO,MAAMnO,EAAO,CACXoO,QAAS,CAAE,iBAAkB,YAE5B/N,MAAK,SAAAgO,GAEJ,IAAMC,EAAcD,EAASD,QAAQpJ,IAAI,gBAEnB,MAApBqJ,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CtO,UAAUC,cAAcsO,MAAMpO,MAAK,SAAAC,GACjCA,EAAaoO,aAAarO,MAAK,WAC7BV,OAAOC,SAAS+O,eAKpB5O,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA8N,CAAwB5O,EAAOC,GAI/BC,UAAUC,cAAcsO,MAAMpO,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OavC/BE,K","file":"static/js/main.bab569f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.67268839.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {\n    TextField,\n    IconButton,\n    Button,\n    Box,\n} from '@material-ui/core';\nimport Collapse from '@material-ui/core/Collapse';\nimport Alert from '@material-ui/lab/Alert';\nimport CloseIcon from '@material-ui/icons/Close';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\n\ninterface Props {\n}\n\ninterface State {\n    email: string,\n    pass: string,\n    toastOpen: boolean,\n    toastMessage: string,\n}\n\nclass LoginPanel extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            email: '',\n            pass: '',\n            toastOpen: false,\n            toastMessage: ''\n        };\n    }\n\n    handleLogin = () => {\n        if (this.state?.email && this.state?.pass) {\n            firebase.auth()\n                    .signInWithEmailAndPassword(this.state.email, this.state.pass)\n                    .catch((error) => {\n                        this.setState({\n                            toastOpen: true,\n                            toastMessage: error.message\n                        })\n                    });\n        }\n    }\n\n    render() {\n        return (\n            <Box p={2} minHeight=\"100vh\" alignContent=\"center\">\n                <Collapse in={this.state.toastOpen}>\n                    <Alert\n                    severity=\"error\"\n                    action={\n                        <IconButton\n                        aria-label=\"close\"\n                        color=\"inherit\"\n                        size=\"small\"\n                        onClick={() => {\n                            this.setState({ toastOpen: false });\n                        }}\n                        >\n                            <CloseIcon fontSize=\"inherit\" />\n                        </IconButton>\n                    }\n                    >\n                    {this.state.toastMessage}\n                    </Alert>\n                </Collapse>\n                <TextField fullWidth id=\"email\" label=\"E-mail\" margin=\"normal\" onChange={(e) => this.setState({email: e.target.value})} />\n                <TextField fullWidth id=\"pass\" type=\"password\" label=\"Password\" margin=\"normal\" onChange={(e) => this.setState({pass: e.target.value})} />\n                <Box display=\"flex\" justifyContent=\"flex-end\">\n                    <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => this.handleLogin()}>\n                        Login\n                    </Button>\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default LoginPanel;","import React from 'react';\nimport {\n    Grid,\n} from '@material-ui/core'\nimport LoginPanel from '../../components/login';\n\ninterface Props {\n    \n}\n\ninterface State {\n\n}\n\nclass LoginScreen extends React.Component<Props, State> {\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <Grid container justify=\"center\" alignItems=\"center\">\n                    <Grid item xs={12} md={4}>\n                        <LoginPanel />\n                    </Grid>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default LoginScreen;\n","import React from 'react';\nimport Zoom from '@material-ui/core/Zoom';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from'@material-ui/core/ListItemText';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Button from '@material-ui/core/Button';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Fade from '@material-ui/core/Fade';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n} from '@material-ui/pickers';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\n\ninterface Props {\n\n}\n\ninterface State {\n    dialogOpen: boolean;\n    date: Date | null;\n    items: Array<Date>;\n}\n\nclass RequestScreen extends React.Component<Props, State> {\n    db: any;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            dialogOpen: false,\n            date: new Date(),\n            items: new Array<Date>(),\n        };\n        this.db = firebase.firestore();\n    }\n\n    componentDidMount = () => {\n        const uid = firebase.auth().currentUser?.uid;\n        const items = new Array<Date>();\n        if (uid) {\n            firebase.firestore().collection('requests').where(\"requestedBy\", \"==\", uid)\n                .get()\n                .then((querySnapshot) => {\n                    querySnapshot.forEach((doc) => {\n                        items.push(doc.data()?.timestamp.toDate());\n                    });\n                    this.setState({ items: items}); \n                })\n                .catch((error) => {\n                    console.log(\"Error fetching documents: \", error);\n                })\n        }\n    }\n\n    handleSetDate = () => {\n        this.setState({dialogOpen: false});\n        firebase.firestore().collection('requests').doc().set({\n            requestedBy: firebase.auth().currentUser?.uid,\n            acceptedBy: '',\n            timestamp: this.state.date\n        })\n        if (this.state.date) {\n            this.state.items.push(this.state.date);\n        }\n    }\n\n    renderDialog = () => {\n        return (\n            <Dialog\n                open={this.state.dialogOpen}\n                onClose={() => this.setState({dialogOpen: false})}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">\n                    Request bot at?\n                </DialogTitle>\n                <DialogContent>\n                    <KeyboardTimePicker\n                    margin=\"normal\"\n                    id=\"time-picker\"\n                    label=\"Pick Time\"\n                    value={this.state.date}\n                    onChange={(date) => this.setState({date: date})}\n                    KeyboardButtonProps={{\n                        'aria-label': 'change time',\n                    }}\n                    />\n                </DialogContent>\n                <DialogActions>\n                <Button\n                onClick={() => this.handleSetDate()}\n                color=\"primary\" autoFocus>\n                    Request\n                </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n\n    getTimeStringFromDate = (date: Date) => {\n        const timeString: String = (date.getHours()%13 + (date.getHours()>12?1:0)).toString().padStart(2, \"0\")\n            + ':' + date.getMinutes().toString().padStart(2, \"0\")\n            + ' ' + ((date.getHours()<12)?'AM':'PM');\n        return timeString;\n    }\n\n    getDateStringFromDate = (date: Date) => {\n        const dateString: String = date.toDateString();\n        return dateString;\n    }\n\n    render() {\n        return (\n            <MuiPickersUtilsProvider utils={DateFnsUtils} >\n                <List disablePadding>\n                    {this.state.items.map((date, index) => {\n                        return React.cloneElement(\n                            <Fade in={true} >\n                                <ListItem divider button key={index} >\n                                    <ListItemText\n                                    primary={this.getTimeStringFromDate(date)}\n                                    secondary={this.getDateStringFromDate(date)} />\n                                </ListItem>\n                            </Fade>)\n                    })}\n                </List>\n                {this.renderDialog()}\n                <Zoom\n                appear={true}\n                in={true}\n                exit={true}\n                timeout={300}>\n                    <Fab\n                    onClick={() => this.setState({dialogOpen: true, date: new Date()})}\n                    color=\"secondary\"\n                    aria-label=\"add\"\n                    style={{ \n                        position: 'fixed',\n                        bottom: 16,\n                        right: 16,\n                    }}>\n                        <AddIcon />\n                    </Fab>\n                </Zoom>\n            </MuiPickersUtilsProvider>\n        );\n    }\n}\n\nexport default RequestScreen;","import React from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Typography from '@material-ui/core/Typography';\n\ninterface Props {\n\n}\n\ninterface State {\n\n}\n\nclass StatusScreen extends React.Component<Props, State> {\n    dummyData = [\n        {\n            label: \"Robot informed!\",\n            completed: true,\n            active: false\n        },\n        {\n            label: \"Reaching restaurant.\",\n            completed: false,\n            active: true\n        },\n        {\n            label: \"Waiting at drop-off point!\",\n            completed: false,\n            active: false\n        },\n        {\n            label: \"NGO has arrived.\",\n            completed: false,\n            active: false\n        },\n        {\n            label: \"Food picked up!\",\n            completed: false,\n            active: false\n        },\n        \n    ]\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n          value: 0\n        }; \n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Stepper orientation=\"vertical\">\n                    {this.dummyData.map(({ label, completed, active }, index) => {\n                        return React.cloneElement(\n                            <Step completed={completed} active={active} key={index}>\n                                <StepLabel>{label}</StepLabel>\n                            </Step>)\n                    })}\n                </Stepper>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default StatusScreen;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button'\nimport { Divider } from '@material-ui/core';\ninterface Props {\n\n}\n\ninterface State {\n\n}\n\nclass AddLocationScreen extends React.Component<Props, State> {\n    render() {\n        return (\n            <Box padding={2} >\n                <Typography variant=\"h5\">\n                    We are expanding!\n                </Typography>\n                <Typography color=\"textSecondary\">\n                Enter below the location and name of shopping centre. We'll expand next to the most requested location!\n                </Typography>\n                <form noValidate>\n                    <Box>\n                        <TextField \n                        id=\"city\" label=\"City\"\n                        placeholder=\"Eg. Ghaziabad\"\n                        margin=\"normal\"\n                        fullWidth />\n                    </Box>\n                    <Box>\n                        <TextField\n                        id=\"mall\" label=\"Shopping Mall\"\n                        placeholder=\"Eg. Shipra Mall\"\n                        margin=\"normal\"\n                        fullWidth />\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"flex-end\" p={2}>\n                        <Button variant=\"contained\" color=\"primary\">Submit</Button>    \n                    </Box>\n                </form>\n            </Box>\n        );\n    }\n}\n\nexport default AddLocationScreen;","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport {\n    ArgumentAxis,\n    ValueAxis,\n    Chart,\n    BarSeries,\n} from '@devexpress/dx-react-chart-material-ui';\nimport {\n    Animation,\n} from '@devexpress/dx-react-chart';\nimport { Typography } from '@material-ui/core';\n\ninterface Props {\n\n}\n\ninterface State {\n\n}\n\nconst data = [\n    { argument: 'Wastage', value: 120 },\n    { argument: 'Collected', value: 80 },\n    { argument: 'Distributed', value: 75 },\n]\n\nclass InformationScreen extends React.Component<Props, State> {\n    render() {\n        return (\n            <Box p={2}>\n                <Typography variant=\"h5\" style={{ marginBottom: 10 }}>\n                    May 2020 (kg)\n                </Typography>\n                <Chart\n                data={data}\n                >  \n                    <ArgumentAxis />\n                    <ValueAxis />\n\n                    <BarSeries valueField=\"value\" argumentField=\"argument\" color=\"#ff8855\" />\n                    <Animation />\n                </Chart>\n            </Box>\n        );\n    }\n}\n\nexport default InformationScreen;","import React from 'react';\nimport Zoom from '@material-ui/core/Zoom';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from'@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Fade from '@material-ui/core/Fade';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n} from '@material-ui/pickers';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\n\ninterface ItemProps {\n    id: string,\n    date: Date,\n    requestedBy: string,\n    acceptedBy: string,\n}\n\ninterface Props {\n\n}\n\ninterface State {\n    dialogOpen: boolean;\n    date: Date | null;\n    items: Array<ItemProps>;\n}\n\nclass AcceptScreen extends React.Component<Props, State> {\n    db: any;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            dialogOpen: false,\n            date: new Date(),\n            items: new Array<ItemProps>(),\n        };\n        this.db = firebase.firestore();\n    }\n\n    componentDidMount = () => {\n        const uid = firebase.auth().currentUser?.uid;\n        if (uid) {\n            const items = new Array<ItemProps>();\n            firebase.firestore().collection('requests')\n                .get()\n                .then((querySnapshot) => {\n                    querySnapshot.forEach((doc) => {\n                        items.push({\n                            id: doc.id,\n                            date: doc.data()?.timestamp.toDate(),\n                            requestedBy: doc.data()?.requestedBy,\n                            acceptedBy: doc.data()?.acceptedBy,\n                        });\n                    });\n                    this.setState({ items: items}); \n                })\n                .catch((error) => {\n                    console.log(\"Error fetching documents: \", error);\n                })\n        }\n    }\n\n    handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n        console.log(event.target.checked);\n        const uid = firebase.auth().currentUser?.uid;\n        if (uid) {\n            firebase.firestore().collection('requests').doc(this.state.items[index]?.id).update({\n                acceptedBy: event.target.checked?uid:''\n            });\n            this.state.items[index].acceptedBy = event.target.checked?uid:'';\n            this.forceUpdate();\n        }\n    }\n    // handleSetDate = () => {\n    //     this.setState({dialogOpen: false});\n    //     firebase.firestore().collection('requests').doc().set({\n    //         requestedBy: firebase.auth().currentUser?.uid,\n    //         acceptedBy: '',\n    //         timestamp: this.state.date\n    //     })\n    //     if (this.state.date) {\n    //         this.state.items.push(this.state.date);\n    //     }\n    // }\n\n    getTimeStringFromDate = (date: Date) => {\n        const timeString: String = (date.getHours()%13 + (date.getHours()>12?1:0)).toString().padStart(2, \"0\")\n            + ':' + date.getMinutes().toString().padStart(2, \"0\")\n            + ' ' + ((date.getHours()<12)?'AM':'PM');\n        return timeString;\n    }\n\n    getDateStringFromDate = (date: Date) => {\n        const dateString: String = date.toDateString();\n        return dateString;\n    }\n\n    render() {\n        return (\n            <MuiPickersUtilsProvider utils={DateFnsUtils} >\n                <List disablePadding>\n                    {this.state.items.map(({ date, acceptedBy }, index) => {\n                        return React.cloneElement(\n                            <Fade in={true} >\n                                <ListItem divider button key={index}>\n                                    <ListItemText\n                                    primary={this.getTimeStringFromDate(date)}\n                                    secondary={this.getDateStringFromDate(date)} />\n                                    <ListItemSecondaryAction>\n                                        <Checkbox\n                                        checked={acceptedBy == firebase.auth().currentUser?.uid}\n                                        disabled={acceptedBy != '' && acceptedBy != firebase.auth().currentUser?.uid}\n                                        onChange={(event) => this.handleCheckboxChange(event, index)}/>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            </Fade>)\n                    })}\n                </List>\n            </MuiPickersUtilsProvider>\n        );\n    }\n}\n\nexport default AcceptScreen;","import React from 'react';\nimport LoginScreen from './login'\nimport RequestScreen from './request';\nimport StatusScreen from './status';\nimport AddLocationScreen from './addlocation';\nimport InformationScreen from './information';\nimport AcceptScreen from './accept';\n\ninterface Props {\n    screen: string,\n}\n\ninterface State {\n\n}\n\nclass ScreenManager extends React.Component<Props, State> {\n    screenMap = new Map<string, any>();\n    \n    constructor(props: Props) {\n        super(props);\n        this.screenMap.set(\"Request\", <RequestScreen />);\n        this.screenMap.set(\"Status\", <StatusScreen />);\n        this.screenMap.set(\"Add Location\", <AddLocationScreen />);\n        this.screenMap.set(\"Information\", <InformationScreen />);\n        this.screenMap.set(\"Login\", <LoginScreen />)\n        this.screenMap.set(\"Accept\", <AcceptScreen />)\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {this.screenMap.get(this.props.screen)}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ScreenManager;\n","import React from 'react';\nimport {\n    SwipeableDrawer, Box, Typography, Hidden\n} from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AddIcon from '@material-ui/icons/Add';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport AddLocationIcon from '@material-ui/icons/AddLocation';\nimport InfoIcon from '@material-ui/icons/Info';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport * as firebase from 'firebase';\nimport 'firebase/auth';\nimport logo from '../../logo.png';\n\ninterface Props {\n    open: boolean,\n    loggedIn: boolean,\n    toggleDrawer: Function,\n    setScreen: Function,\n    userType: string,\n    screen: string,\n}\n\ninterface State {\n\n}\n\nclass Sidebar extends React.Component<Props, State> {\n    handleLogout = () => {\n        firebase.auth().signOut().catch((error) => {\n            console.log(error.code);\n            console.log(error.message);\n        });\n        this.props.setScreen(\"Login\");\n        this.props.toggleDrawer(false);\n    }\n\n    renderDrawerContents = () => {\n        return (\n            <React.Fragment>\n                <Box style={{\n                    width: 240,\n                }}\n                // color=\"#ffffff\" \n                padding={2}\n                display=\"flex\"\n                alignItems=\"center\">\n                    <Avatar src={logo} />\n                    <Typography variant=\"h5\" style={{ paddingLeft: 16}}>\n                        SF-CADS\n                    </Typography>\n                </Box>\n                <Divider />\n                <List>\n                    {this.props.userType == \"restaurant\"?(\n                        <ListItem button key={1}\n                        disabled={!this.props.loggedIn}\n                        onClick={() => {\n                            this.props.setScreen(\"Request\");\n                            this.props.toggleDrawer(false);\n                        }}>\n                            <ListItemIcon>\n                                <AddIcon />\n                            </ListItemIcon>\n                            <ListItemText>\n                                Request\n                            </ListItemText>\n                        </ListItem>\n                    ):null}\n                    {this.props.userType == \"ngo\"?(\n                        <ListItem button key={2}\n                        disabled={!this.props.loggedIn}\n                        onClick={() => {\n                            this.props.setScreen(\"Accept\");\n                            this.props.toggleDrawer(false);\n                        }}>\n                            <ListItemIcon>\n                            {/* TODO: CHANGE ICON HERE */}\n                                <AddIcon />\n                            </ListItemIcon>\n                            <ListItemText>\n                                Accept\n                            </ListItemText>\n                        </ListItem>\n                    ):null}\n                    {this.props.loggedIn?(\n                        <ListItem button key={3}\n                        onClick={() => {\n                            this.props.setScreen(\"Status\");\n                            this.props.toggleDrawer(false);\n                        }}>\n                            <ListItemIcon>\n                                <TimelineIcon />\n                            </ListItemIcon>\n                            <ListItemText>\n                                Status\n                            </ListItemText>\n                        </ListItem>\n                    ):null}\n                    <ListItem button key={4}\n                    onClick={() => {\n                        this.props.setScreen(\"Add Location\");\n                        this.props.toggleDrawer(false);\n                    }}>\n                        <ListItemIcon>\n                        <AddLocationIcon />\n                        </ListItemIcon>\n                        <ListItemText>\n                            Add Location\n                        </ListItemText>\n                    </ListItem>\n                    <ListItem button key={5}\n                    onClick={() => {\n                        this.props.setScreen(\"Information\");\n                        this.props.toggleDrawer(false);\n                    }}>\n                        <ListItemIcon>\n                            <InfoIcon />\n                        </ListItemIcon>\n                        <ListItemText>\n                            Information\n                        </ListItemText>\n                    </ListItem>\n                    <Divider />\n                    {this.props.loggedIn?(\n                        <ListItem divider button key=\"6\"\n                        onClick={() => this.handleLogout()}>\n                            <ListItemIcon>\n                                <ExitToAppIcon />\n                            </ListItemIcon>\n                            <ListItemText>\n                                Logout\n                            </ListItemText>\n                        </ListItem>\n                    ):(\n                        <ListItem divider button key=\"7\"\n                        disabled={this.props.screen == \"Login\"}\n                        onClick={() => {\n                            this.props.setScreen(\"Login\");\n                            this.props.toggleDrawer(false);\n                        }}>\n                            <ListItemIcon>\n                                <AccountCircleIcon />\n                            </ListItemIcon>\n                            <ListItemText>\n                                Login\n                            </ListItemText>\n                        </ListItem>\n                    )}\n                </List>\n            </React.Fragment>\n        );\n    }\n    renderSwipeableDrawer = () => {\n        return (\n            <SwipeableDrawer\n                open={this.props.open}\n                onOpen={() => this.props.toggleDrawer(true)}\n                onClose={() => this.props.toggleDrawer(false)}\n            >   \n                {this.renderDrawerContents()}\n            </SwipeableDrawer>\n        );\n    };\n\n    renderPermanentDrawer = () => {\n        return (\n            <Drawer\n                variant=\"permanent\"\n            >   \n                {this.renderDrawerContents()}\n            </Drawer>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {/* <Hidden xsDown implementation=\"js\">\n                    {this.renderPermanentDrawer()}\n                </Hidden>\n                <Hidden smUp implementation=\"js\">\n                    {this.renderSwipeableDrawer()}\n                </Hidden> */}\n                {this.renderSwipeableDrawer()}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Sidebar;","import React from 'react';\nimport {\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\ninterface Props {\n    title: string,\n    toggleDrawer: Function\n}\n\ninterface State {\n\n}\n\nclass Navbar extends React.Component<Props, State> {\n\n    render() {\n        return (\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"menu\"\n                    onClick={() => this.props.toggleDrawer(true)}>\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        {this.props.title}\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        );\n    }\n}\n\nexport default Navbar;","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport ScreenManager from '../screens';\nimport Sidebar from '../components/sidebar';\nimport Navbar from '../components/navbar';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Button from '@material-ui/core/Button';\nimport * as firebase from 'firebase';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport { Typography, Divider } from '@material-ui/core';\n\ninterface Props {\n\n}\n\ninterface State {\n    loggedIn: boolean,\n    open: boolean,\n    screen: string,\n    type: string,\n    dialogOpen: boolean,\n    userType: string,\n}\n\nclass AppContainer extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loggedIn: firebase.auth().currentUser != null,\n            open: false,\n            screen: 'Login',\n            type: '',\n            dialogOpen: false,\n            userType: '',\n        }\n    }\n\n    componentDidMount = () => {\n        this.handleLogin();\n    }\n\n    setUserType = (type: string) => {\n        const user = firebase.auth().currentUser;\n        if (user) {\n            const db = firebase.firestore();\n            const userRef = db.collection('users').doc(user.uid);\n            userRef.set({\n                type: type\n            }).then(() => {\n                console.log(\"Document successfully written!\");\n                if (type === \"ngo\") {\n                    this.setState({\n                        screen: \"Accept\",\n                        loggedIn: true\n                    })\n                } else if (type === \"restaurant\") {\n                    this.setState({\n                        screen: \"Request\",\n                        loggedIn: true\n                    })\n                } else {\n                    console.error(\"Invalid choice.\");\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error writing document: \", error);\n            });\n        } else {\n            console.log(\"Some error occured.\");\n        }\n        this.setState({dialogOpen: false});\n    }\n\n    handleLogin = () => {\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n                const db = firebase.firestore();\n                const userRef = db.collection('users').doc(user.uid);\n                // this.getUserType(userRef);\n                userRef.get().then((doc) => {\n                    if (doc.exists) {\n                        if (doc.data()?.type === 'restaurant') {\n                            this.setState({\n                                userType: \"restaurant\",\n                                screen: \"Request\",\n                                loggedIn: true\n                            })\n                        } else if (doc.data()?.type === 'ngo') {\n                            this.setState({\n                                userType: \"ngo\",\n                                screen: \"Accept\",\n                                loggedIn: true\n                            })\n                        } else {\n                            console.log(\"Invalid data error.\")\n                        }\n                    } else {\n                        this.setState({dialogOpen: true})\n                    }\n                }).catch((error) => {   \n                    console.log(\"Error fetching document: \" + error);\n                })\n            } else {\n                this.setState({\n                    screen: \"Login\",\n                    loggedIn: false\n                })\n            }\n        })\n    }\n\n    toggleDrawer = (open: boolean) => {\n        this.setState({open: open});\n    }\n\n    setScreen = (screen: string) => {\n        this.setState({screen: screen});\n    }\n\n    setLoggedIn = (loggedIn: boolean) => {\n        this.setState({loggedIn: loggedIn});\n    }\n\n    render() {\n        return (\n            <Box bgcolor=\"#dddddd\" minHeight=\"100vh\">\n                <Navbar\n                    title={this.state.screen}\n                    toggleDrawer={this.toggleDrawer} />\n                <Sidebar\n                    screen={this.state.screen}\n                    open={this.state.open}\n                    toggleDrawer={this.toggleDrawer}\n                    setScreen={this.setScreen}\n                    loggedIn={this.state.loggedIn} \n                    userType={this.state.userType} />\n                <Container maxWidth='md' style={{ padding: 0}}>\n                    <Box bgcolor=\"#ffffff\" boxShadow={3}>\n                        <ScreenManager\n                        screen={this.state.screen}\n                        />\n                    </Box>\n                </Container>\n                <Dialog\n                open={this.state.dialogOpen}\n                onClose={() => this.setState({dialogOpen: false})}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                disableBackdropClick\n                disableEscapeKeyDown\n                >\n                    <DialogTitle id=\"alert-dialog-title\">\n                        First time login detected!\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Choose which type of account you want. (This cannot be changed at a later stage)\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button fullWidth\n                        onClick={() => this.setUserType(\"ngo\")}\n                        color=\"secondary\">\n                            Ngo\n                        </Button>\n                        <Button fullWidth\n                        onClick={() => this.setUserType(\"restaurant\")}\n                        color=\"primary\">\n                            Restaurant\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Box>\n        );\n    }\n}\n\nexport default AppContainer;","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAW4UfRsC3q1LEJpAxUH8GZqUBJWQ5pJtk\",\n    authDomain: \"sf-cads.firebaseapp.com\",\n    databaseURL: \"https://sf-cads.firebaseio.com\",\n    projectId: \"sf-cads\",\n    storageBucket: \"sf-cads.appspot.com\",\n    messagingSenderId: \"421853704272\",\n    appId: \"1:421853704272:web:53ffcd1309a482924a2155\",\n    measurementId: \"G-QVPE9JGSJ5\"\n};\n\nconst initializeFirebase = () => {\n    firebase.initializeApp(firebaseConfig);\n}\n\nexport default initializeFirebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppContainer from './container';\nimport initializeFirebase from './scripts/initializeFirebase';\nimport * as firebase from 'firebase';\n\nReactDOM.render(\n  <React.StrictMode>\n    {initializeFirebase()}\n    <AppContainer/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}